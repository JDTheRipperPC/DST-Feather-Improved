local Feathers = Class(function(self, inst)	self.inst = inst	self.droptime = 1 + math.random(10, 30) -- Dont use hardcoded value, also no need for math random, use a value from the mod settings	self.birdname = nil	self.inst:DoPeriodicTask(self.droptime, function() self:DropFeather() end)	print(self.droptime)  -- TODO: show droptime on hover the birdcage like "show me origin" mod data previewend)local birds_feather = {    ["crow"] = "feather_crow",    ["robin"] = "feather_robin",    ["robin_winter"] = "feather_robin_winter",    ["canary"] = "feather_canary",    ["parrot"] = "feather_robin",    ["parrot_pirate"] = "feather_robin",    ["seagull"] = "feather_robin_winter",    ["toucan"] = "feather_crow",}function Feathers:DropFeather()    print("Feathers")    if math.random() < .5 then	local x,y,z = self.inst.Transform:GetWorldPosition()	local nearbyfeathers = TheSim:FindEntities(x,y,z, 3, {"feather"} )	print(#nearbyfeathers)	if #nearbyfeathers >= 6 then return end  -- TODO: fix this, also dont use hardcoded value		if self.birdname ~= nil then	    local feather = SpawnPrefab(birds_feather[self.birdname])	    if feather then				local pt = Point(self.inst.Transform:GetWorldPosition())				feather.Transform:SetPosition(pt.x,pt.y,pt.z)				if feather.Physics then		    -- simpify maths, there is no need to use black magic		    local angle = math.random()*2*PI		    feather.Physics:SetVel(2*math.cos(angle), 10, 2*math.sin(angle))		    if feather and feather.Physics and self.inst and self.inst.Physics then			pt = pt + Vector3(math.cos(angle), 0, math.sin(angle))*((feather.Physics:GetRadius() or 1) + (self.inst.Physics:GetRadius() or 1))			feather.Transform:SetPosition(pt.x,pt.y,pt.z)		    end		    		    feather:DoTaskInTime(1, 					 function() 					     if not (feather.components.inventoryitem and feather.components.inventoryitem:IsHeld()) then						 if not feather:IsOnValidGround() then						     local fx = SpawnPrefab("splash_ocean")						     local pos = feather:GetPosition()						     fx.Transform:SetPosition(pos.x, pos.y, pos.z)						     feather:Remove()						 end					     end		    end)		end	    end	end    endendfunction Feathers:OnLoad(data)    self.birdname = data.birdname or nilendfunction Feathers:OnSave()    local data = {}    data.birdname = self.birdname    return dataendreturn Feathers